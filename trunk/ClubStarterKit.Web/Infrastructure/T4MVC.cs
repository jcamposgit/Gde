// <auto-generated />
  // This file was generated by a T4 template.
  // Don't change it directly as your change would get overwritten.  Instead, make changes
  // to the .tt file (i.e. the T4 template) and save it to regenerate this file.

  // Make sure the compiler doesn't complain about missing Xml comments
  #pragma warning disable 1591
  #region T4MVC

using System.Collections.Generic;
using System.Runtime.CompilerServices;
using System.Web;
using System.Web.Hosting;
using System.Web.Mvc;
using System.Web.Mvc.Ajax;
using System.Web.Mvc.Html;
using System.Web.Routing;
using T4MVC;

[CompilerGenerated]
public static class Website {
    public static ClubStarterKit.Web.Controllers.BlogController Blog = new T4MVC_BlogController();
    public static ClubStarterKit.Web.Controllers.ContentPageController ContentPage = new T4MVC_ContentPageController();
    public static ClubStarterKit.Web.Controllers.ContentSectionController ContentSection = new T4MVC_ContentSectionController();
    public static ClubStarterKit.Web.Controllers.DownloadsController Downloads = new T4MVC_DownloadsController();
    public static ClubStarterKit.Web.Controllers.EventsController Events = new T4MVC_EventsController();
    public static ClubStarterKit.Web.Controllers.ForumController Forum = new T4MVC_ForumController();
    public static ClubStarterKit.Web.Controllers.HomeController Home = new T4MVC_HomeController();
    public static ClubStarterKit.Web.Controllers.MembershipController Membership = new T4MVC_MembershipController();
    public static ClubStarterKit.Web.Controllers.MessageController Message = new T4MVC_MessageController();
    public static ClubStarterKit.Web.Controllers.NewsController News = new T4MVC_NewsController();
    public static ClubStarterKit.Web.Controllers.PhotosController Photos = new T4MVC_PhotosController();
    public static ClubStarterKit.Web.Controllers.PollController Poll = new T4MVC_PollController();
    public static ClubStarterKit.Web.Controllers.ThreadController Thread = new T4MVC_ThreadController();
    public static T4MVC.SharedController Shared = new T4MVC.SharedController();
}

namespace System.Web.Mvc {
    [CompilerGenerated]
    public static class T4Extensions {
        public static MvcHtmlString ActionLink(this HtmlHelper htmlHelper, string linkText, ActionResult result) {
            return htmlHelper.RouteLink(linkText, result.GetRouteValueDictionary());
        }

        public static MvcHtmlString ActionLink(this HtmlHelper htmlHelper, string linkText, ActionResult result, object htmlAttributes) {
            return ActionLink(htmlHelper, linkText, result, new RouteValueDictionary(htmlAttributes));
        }

        public static MvcHtmlString ActionLink(this HtmlHelper htmlHelper, string linkText, ActionResult result, IDictionary<string, object> htmlAttributes) {
            return htmlHelper.RouteLink(linkText, result.GetRouteValueDictionary(), htmlAttributes);
        }

        public static MvcForm BeginForm(this HtmlHelper htmlHelper, ActionResult result, FormMethod formMethod) {
            return htmlHelper.BeginForm(result, formMethod, null);
        }

        public static MvcForm BeginForm(this HtmlHelper htmlHelper, ActionResult result, FormMethod formMethod, object htmlAttributes) {
            return BeginForm(htmlHelper, result, formMethod, new RouteValueDictionary(htmlAttributes));
        }

        public static MvcForm BeginForm(this HtmlHelper htmlHelper, ActionResult result, FormMethod formMethod, IDictionary<string, object> htmlAttributes) {
            var callInfo = (IT4MVCActionResult)result;
            return htmlHelper.BeginForm(callInfo.Action, callInfo.Controller, callInfo.RouteValues, formMethod, htmlAttributes);
        }

        public static void RenderAction(this HtmlHelper htmlHelper, ActionResult result) {
            var callInfo = (IT4MVCActionResult)result;
            htmlHelper.RenderAction(callInfo.Action, callInfo.Controller, callInfo.RouteValues);
        }

        public static MvcHtmlString Action(this HtmlHelper htmlHelper, ActionResult result) {
            var callInfo = (IT4MVCActionResult)result;
            return htmlHelper.Action(callInfo.Action, callInfo.Controller, callInfo.RouteValues);
        }
        public static string Action(this UrlHelper urlHelper, ActionResult result) {
            return urlHelper.RouteUrl(result.GetRouteValueDictionary());
        }

        public static MvcHtmlString ActionLink(this AjaxHelper ajaxHelper, string linkText, ActionResult result, AjaxOptions ajaxOptions) {
            return ajaxHelper.RouteLink(linkText, result.GetRouteValueDictionary(), ajaxOptions);
        }

        public static MvcHtmlString ActionLink(this AjaxHelper ajaxHelper, string linkText, ActionResult result, AjaxOptions ajaxOptions, object htmlAttributes) {
            return ajaxHelper.RouteLink(linkText, result.GetRouteValueDictionary(), ajaxOptions, new RouteValueDictionary(htmlAttributes));
        }

        public static MvcHtmlString ActionLink(this AjaxHelper ajaxHelper, string linkText, ActionResult result, AjaxOptions ajaxOptions, IDictionary<string, object> htmlAttributes) {
            return ajaxHelper.RouteLink(linkText, result.GetRouteValueDictionary(), ajaxOptions, htmlAttributes);
        }

        public static Route MapRoute(this RouteCollection routes, string name, string url, ActionResult result) {
            return routes.MapRoute(name, url, result, (ActionResult)null);
        }

        public static Route MapRoute(this RouteCollection routes, string name, string url, ActionResult result, object defaults) {
            // Start by adding the default values from the anonymous object (if any)
            var routeValues = new RouteValueDictionary(defaults);

            // Then add the Controller/Action names and the parameters from the call
            foreach (var pair in result.GetRouteValueDictionary()) {
                routeValues.Add(pair.Key, pair.Value);
            }

            // Create and add the route
            var route = new Route(url, routeValues, new MvcRouteHandler());
            routes.Add(name, route);
            return route;
        }

        public static RouteValueDictionary GetRouteValueDictionary(this ActionResult result) {
            return ((IT4MVCActionResult)result).RouteValues;
        }

        public static void InitMVCT4Result(this IT4MVCActionResult result, string controller, string action) {
            result.Controller = controller;
            result.Action = action; ;
            result.RouteValues = new RouteValueDictionary();
            result.RouteValues.Add("Controller", controller);
            result.RouteValues.Add("Action", action);
        }

        public static bool FileExists(string virtualPath) {
            if (!HostingEnvironment.IsHosted) return false;
            string filePath = HostingEnvironment.MapPath(virtualPath);
            return System.IO.File.Exists(filePath);
        }
    }
}

[CompilerGenerated]
public interface IT4MVCActionResult {
    string Action { get; set; }
    string Controller { get; set; }
    RouteValueDictionary RouteValues { get; set; }
}

[CompilerGenerated]
public class T4MVC_ActionResult : System.Web.Mvc.ActionResult, IT4MVCActionResult {
    public T4MVC_ActionResult(string controller, string action): base()  {
        this.InitMVCT4Result(controller, action);
    }
     
    public override void ExecuteResult(System.Web.Mvc.ControllerContext context) { }
    
    public string Controller { get; set; }
    public string Action { get; set; }
    public RouteValueDictionary RouteValues { get; set; }
}



namespace Links {
    [CompilerGenerated]
    public static class @Content {
        private const string URLPATH = "~/Content";
        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
        [CompilerGenerated]
        public static class @Css {
            private const string URLPATH = "~/Content/Css";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string Blog_css = Url("Blog.css");
            public static readonly string Calendar_css = Url("Calendar.css");
            public static readonly string Format_css = Url("Format.css");
            public static readonly string Forms_css = Url("Forms.css");
            public static readonly string Forums_css = Url("Forums.css");
            public static readonly string Html_css = Url("Html.css");
            public static readonly string jquery_datetimepicker_css = Url("jquery-datetimepicker.css");
            public static readonly string jquery_ui_css = Url("jquery-ui.css");
            public static readonly string jquery_wysiwyg_css = Url("jquery.wysiwyg.css");
            public static readonly string Misc_css = Url("Misc.css");
            public static readonly string Pager_css = Url("Pager.css");
            public static readonly string Photos_css = Url("Photos.css");
            public static readonly string Poll_css = Url("Poll.css");
        }
    
        [CompilerGenerated]
        public static class @Images {
            private const string URLPATH = "~/Content/Images";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string align_left_png = Url("align_left.png");
            public static readonly string background_columnleft_gif = Url("background_columnleft.gif");
            public static readonly string background_columnright_gif = Url("background_columnright.gif");
            public static readonly string background_fullwidth_jpg = Url("background_fullwidth.jpg");
            public static readonly string background_main_jpg = Url("background_main.jpg");
            public static readonly string background_nav_main_gif = Url("background_nav_main.gif");
            public static readonly string background_thumbnail_jpg = Url("background_thumbnail.jpg");
            public static readonly string bold_png = Url("bold.png");
            public static readonly string deindent_png = Url("deindent.png");
            public static readonly string Delete_png = Url("Delete.png");
            public static readonly string Edit_gif = Url("Edit.gif");
            public static readonly string Edit_png = Url("Edit.png");
            public static readonly string font_add_png = Url("font_add.png");
            public static readonly string font_delete_png = Url("font_delete.png");
            public static readonly string h1_png = Url("h1.png");
            public static readonly string h2_png = Url("h2.png");
            public static readonly string h3_png = Url("h3.png");
            public static readonly string html_png = Url("html.png");
            public static readonly string indent_png = Url("indent.png");
            public static readonly string italic_png = Url("italic.png");
            public static readonly string link_png = Url("link.png");
            public static readonly string loading_gif = Url("loading.gif");
            public static readonly string nophoto_gif = Url("nophoto.gif");
            public static readonly string numbered_list_png = Url("numbered_list.png");
            public static readonly string picture_link_png = Url("picture_link.png");
            public static readonly string poster_jpg = Url("poster.jpg");
            public static readonly string print_png = Url("print.png");
            public static readonly string redo_png = Url("redo.png");
            public static readonly string rss_png = Url("rss.png");
            public static readonly string Save_png = Url("Save.png");
            public static readonly string subscript_png = Url("subscript.png");
            public static readonly string superscript_png = Url("superscript.png");
            public static readonly string text_align_center_png = Url("text_align_center.png");
            public static readonly string text_align_justify_png = Url("text_align_justify.png");
            public static readonly string text_align_left_png = Url("text_align_left.png");
            public static readonly string text_align_right_png = Url("text_align_right.png");
            public static readonly string ui_bg_diagonals_thick_18_b81900_40x40_png = Url("ui-bg_diagonals-thick_18_b81900_40x40.png");
            public static readonly string ui_bg_diagonals_thick_20_666666_40x40_png = Url("ui-bg_diagonals-thick_20_666666_40x40.png");
            public static readonly string ui_bg_flat_10_000000_40x100_png = Url("ui-bg_flat_10_000000_40x100.png");
            public static readonly string ui_bg_glass_100_f6f6f6_1x400_png = Url("ui-bg_glass_100_f6f6f6_1x400.png");
            public static readonly string ui_bg_glass_100_fdf5ce_1x400_png = Url("ui-bg_glass_100_fdf5ce_1x400.png");
            public static readonly string ui_bg_glass_65_ffffff_1x400_png = Url("ui-bg_glass_65_ffffff_1x400.png");
            public static readonly string ui_bg_gloss_wave_35_f6a828_500x100_png = Url("ui-bg_gloss-wave_35_f6a828_500x100.png");
            public static readonly string ui_bg_highlight_soft_100_eeeeee_1x100_png = Url("ui-bg_highlight-soft_100_eeeeee_1x100.png");
            public static readonly string ui_bg_highlight_soft_75_ffe45c_1x100_png = Url("ui-bg_highlight-soft_75_ffe45c_1x100.png");
            public static readonly string ui_icons_222222_256x240_png = Url("ui-icons_222222_256x240.png");
            public static readonly string ui_icons_228ef1_256x240_png = Url("ui-icons_228ef1_256x240.png");
            public static readonly string ui_icons_ef8c08_256x240_png = Url("ui-icons_ef8c08_256x240.png");
            public static readonly string ui_icons_ffd27a_256x240_png = Url("ui-icons_ffd27a_256x240.png");
            public static readonly string ui_icons_ffffff_256x240_png = Url("ui-icons_ffffff_256x240.png");
            public static readonly string underline_png = Url("underline.png");
            public static readonly string undo_png = Url("undo.png");
            public static readonly string unordered_list_png = Url("unordered_list.png");
        }
    
        [CompilerGenerated]
        public static class @Javascript {
            private const string URLPATH = "~/Content/Javascript";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string Confirmation_js = "Confirmation.js";
            public static readonly string forms_js = "forms.js";
            public static readonly string jquery_1_3_2_js = "jquery-1.3.2.js";
            public static readonly string jquery_blockui_js = "jquery-blockui.js";
            public static readonly string jquery_datetimepicker_js = "jquery-datetimepicker.js";
            public static readonly string jquery_forms_js = "jquery-forms.js";
            public static readonly string jquery_history_js = "jquery-history.js";
            public static readonly string jquery_metadata_js = "jquery-metadata.js";
            public static readonly string jquery_ui_js = "jquery-ui.js";
            public static readonly string jquery_validation_js = "jquery-validation.js";
            public static readonly string jquery_wysiwyg_js = "jquery-wysiwyg.js";
        }
    
        [CompilerGenerated]
        public static class @PageJavascript {
            private const string URLPATH = "~/Content/PageJavascript";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string Calendar_js = "Calendar.js";
            public static readonly string CalendarMonth_js = "CalendarMonth.js";
            public static readonly string ForumThreadView_js = "ForumThreadView.js";
            public static readonly string ForumTopicEdit_js = "ForumTopicEdit.js";
            public static readonly string Login_js = "Login.js";
            public static readonly string PagedList_js = "PagedList.js";
            public static readonly string PhotoAdmin_js = "PhotoAdmin.js";
            public static readonly string PollAddAnswer_js = "PollAddAnswer.js";
            public static readonly string PollResults_js = "PollResults.js";
            public static readonly string ProfileEdit_js = "ProfileEdit.js";
        }
    
        [CompilerGenerated]
        public static class @Uploads {
            private const string URLPATH = "~/Content/Uploads";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            [CompilerGenerated]
            public static class @Downloads {
                private const string URLPATH = "~/Content/Uploads/Downloads";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string placeholder_txt = Url("placeholder.txt");
            }
        
            [CompilerGenerated]
            public static class @Photos {
                private const string URLPATH = "~/Content/Uploads/Photos";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string accept_png = Url("accept.png");
                public static readonly string add_png = Url("add.png");
                public static readonly string anchor_png = Url("anchor.png");
                public static readonly string application_png = Url("application.png");
                public static readonly string bin_png = Url("bin.png");
                public static readonly string book_png = Url("book.png");
            }
        
        }
    
    }

}

static class T4MVCHelpers {
    // You can change the ProcessVirtualPath method to modify the path that gets returned to the client.
    // e.g. you can prepend a domain, or append a query string:
    //      return "http://localhost" + path + "?foo=bar";
    public static string ProcessVirtualPath(string virtualPath) {
        // The path that comes in starts with ~/ and must first be made absolute
        string path = VirtualPathUtility.ToAbsolute(virtualPath);
        
        // Add your own modifications here before returning the path
        return path;
    }
    
    // Logic to determine if the app is running in production or dev environment
    public static bool IsProduction() { 
        return (HttpContext.Current != null && !HttpContext.Current.IsDebuggingEnabled); 
    }
}


namespace ClubStarterKit.Web.Controllers {
    public partial class BlogController {

        public BlogController() { }

        [CompilerGenerated]
        protected BlogController(Dummy d) { }

        protected RedirectToRouteResult RedirectToAction(ActionResult result) {
            var callInfo = (IT4MVCActionResult)result;
            return RedirectToRoute(callInfo.RouteValues);
        }

        [NonAction]
        public System.Web.Mvc.ActionResult List() {
            return new T4MVC_ActionResult(Name, Actions.List);
        }

        [NonAction]
        public System.Web.Mvc.ActionResult Author() {
            return new T4MVC_ActionResult(Name, Actions.Author);
        }

        [NonAction]
        public System.Web.Mvc.ActionResult Rss() {
            return new T4MVC_ActionResult(Name, Actions.Rss);
        }

        [NonAction]
        public System.Web.Mvc.ActionResult Show() {
            return new T4MVC_ActionResult(Name, Actions.Show);
        }

        [NonAction]
        public System.Web.Mvc.ActionResult Edit() {
            return new T4MVC_ActionResult(Name, Actions.Edit);
        }

        [NonAction]
        public System.Web.Mvc.ActionResult Update() {
            return new T4MVC_ActionResult(Name, Actions.Update);
        }

        [NonAction]
        public System.Web.Mvc.ActionResult Delete() {
            return new T4MVC_ActionResult(Name, Actions.Delete);
        }

        [NonAction]
        public System.Web.Mvc.ActionResult AddComment() {
            return new T4MVC_ActionResult(Name, Actions.AddComment);
        }

        [NonAction]
        public System.Web.Mvc.ActionResult DeleteComment() {
            return new T4MVC_ActionResult(Name, Actions.DeleteComment);
        }


        [CompilerGenerated]
        public readonly string Name = "Blog";

        static readonly ActionNames s_actions = new ActionNames();
        [CompilerGenerated]
        public ActionNames Actions { get { return s_actions; } }
        [CompilerGenerated]
        public class ActionNames {
            public readonly string Index = "Index";
            public readonly string List = "List";
            public readonly string Author = "Author";
            public readonly string Rss = "Rss";
            public readonly string Show = "View";
            public readonly string Edit = "Edit";
            public readonly string New = "New";
            public readonly string Update = "Update";
            public readonly string Delete = "Delete";
            public readonly string AddComment = "AddComment";
            public readonly string DeleteComment = "DeleteComment";
        }


        [CompilerGenerated]
        public ViewNames Views { get { return new ViewNames(); } }
        [CompilerGenerated]
        public class ViewNames {
            private bool _withPath = false;
            public ViewNames WithPath { get { _withPath = true; return this ;} }
            public string PathName { get { return ""; } }
            public string Edit { get { return (_withPath ? PathName + "/" : "") + "Edit"; } }
            public string List { get { return (_withPath ? PathName + "/" : "") + "List"; } }
            public string View { get { return (_withPath ? PathName + "/" : "") + "View"; } }
            static readonly _DisplayTemplates s_DisplayTemplates = new _DisplayTemplates();
            public _DisplayTemplates DisplayTemplates { get { return s_DisplayTemplates; } }
            public partial class _DisplayTemplates{
                private bool _withPath = false;
                public _DisplayTemplates WithPath { get { _withPath = true; return this ;} }
                public string PathName { get { return "DisplayTemplates"; } }
                public string CommentsView { get { return (_withPath ? PathName + "/" : "") + "CommentsView"; } }
                public string PagedBlogPosts { get { return (_withPath ? PathName + "/" : "") + "PagedBlogPosts"; } }
            }
        }
    }
}

namespace T4MVC {
    [CompilerGenerated]
    public class T4MVC_BlogController: ClubStarterKit.Web.Controllers.BlogController {
        public T4MVC_BlogController() : base(Dummy.Instance) { }

        public override System.Web.Mvc.ActionResult Index() {
            var callInfo = new T4MVC_ActionResult("Blog", Actions.Index);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult List(int id) {
            var callInfo = new T4MVC_ActionResult("Blog", Actions.List);
            callInfo.RouteValues.Add("id", id);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult Author(string id, int? page) {
            var callInfo = new T4MVC_ActionResult("Blog", Actions.Author);
            callInfo.RouteValues.Add("id", id);
            callInfo.RouteValues.Add("page", page);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult Rss(string id) {
            var callInfo = new T4MVC_ActionResult("Blog", Actions.Rss);
            callInfo.RouteValues.Add("id", id);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult Show(string id) {
            var callInfo = new T4MVC_ActionResult("Blog", Actions.Show);
            callInfo.RouteValues.Add("id", id);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult Edit(string id) {
            var callInfo = new T4MVC_ActionResult("Blog", Actions.Edit);
            callInfo.RouteValues.Add("id", id);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult New() {
            var callInfo = new T4MVC_ActionResult("Blog", Actions.New);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult Update(ClubStarterKit.Domain.BlogPost post) {
            var callInfo = new T4MVC_ActionResult("Blog", Actions.Update);
            callInfo.RouteValues.Add("post", post);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult Delete(string id) {
            var callInfo = new T4MVC_ActionResult("Blog", Actions.Delete);
            callInfo.RouteValues.Add("id", id);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult AddComment(string commentText, ClubStarterKit.Domain.BlogPost post) {
            var callInfo = new T4MVC_ActionResult("Blog", Actions.AddComment);
            callInfo.RouteValues.Add("commentText", commentText);
            callInfo.RouteValues.Add("post", post);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult DeleteComment(ClubStarterKit.Domain.BlogComment comment) {
            var callInfo = new T4MVC_ActionResult("Blog", Actions.DeleteComment);
            callInfo.RouteValues.Add("comment", comment);
            return callInfo;
        }

    }
}

namespace ClubStarterKit.Web.Controllers {
    public partial class ContentPageController {

        public ContentPageController() { }

        [CompilerGenerated]
        protected ContentPageController(Dummy d) { }

        protected RedirectToRouteResult RedirectToAction(ActionResult result) {
            var callInfo = (IT4MVCActionResult)result;
            return RedirectToRoute(callInfo.RouteValues);
        }

        [NonAction]
        public System.Web.Mvc.ActionResult Page() {
            return new T4MVC_ActionResult(Name, Actions.Page);
        }

        [NonAction]
        public System.Web.Mvc.ActionResult Edit() {
            return new T4MVC_ActionResult(Name, Actions.Edit);
        }

        [NonAction]
        public System.Web.Mvc.ActionResult Update() {
            return new T4MVC_ActionResult(Name, Actions.Update);
        }

        [NonAction]
        public System.Web.Mvc.ActionResult Delete() {
            return new T4MVC_ActionResult(Name, Actions.Delete);
        }


        [CompilerGenerated]
        public readonly string Name = "ContentPage";

        static readonly ActionNames s_actions = new ActionNames();
        [CompilerGenerated]
        public ActionNames Actions { get { return s_actions; } }
        [CompilerGenerated]
        public class ActionNames {
            public readonly string Page = "Page";
            public readonly string Edit = "Edit";
            public readonly string New = "New";
            public readonly string Update = "Update";
            public readonly string Delete = "Delete";
        }


        [CompilerGenerated]
        public ViewNames Views { get { return new ViewNames(); } }
        [CompilerGenerated]
        public class ViewNames {
            private bool _withPath = false;
            public ViewNames WithPath { get { _withPath = true; return this ;} }
            public string PathName { get { return ""; } }
            public string Edit { get { return (_withPath ? PathName + "/" : "") + "Edit"; } }
            public string Page { get { return (_withPath ? PathName + "/" : "") + "Page"; } }
        }
    }
}

namespace T4MVC {
    [CompilerGenerated]
    public class T4MVC_ContentPageController: ClubStarterKit.Web.Controllers.ContentPageController {
        public T4MVC_ContentPageController() : base(Dummy.Instance) { }

        public override System.Web.Mvc.ActionResult Page(string id) {
            var callInfo = new T4MVC_ActionResult("ContentPage", Actions.Page);
            callInfo.RouteValues.Add("id", id);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult Edit(string id) {
            var callInfo = new T4MVC_ActionResult("ContentPage", Actions.Edit);
            callInfo.RouteValues.Add("id", id);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult New() {
            var callInfo = new T4MVC_ActionResult("ContentPage", Actions.New);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult Update(ClubStarterKit.Domain.ContentPage page) {
            var callInfo = new T4MVC_ActionResult("ContentPage", Actions.Update);
            callInfo.RouteValues.Add("page", page);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult Delete(string id) {
            var callInfo = new T4MVC_ActionResult("ContentPage", Actions.Delete);
            callInfo.RouteValues.Add("id", id);
            return callInfo;
        }

    }
}

namespace ClubStarterKit.Web.Controllers {
    public partial class ContentSectionController {

        public ContentSectionController() { }

        [CompilerGenerated]
        protected ContentSectionController(Dummy d) { }

        protected RedirectToRouteResult RedirectToAction(ActionResult result) {
            var callInfo = (IT4MVCActionResult)result;
            return RedirectToRoute(callInfo.RouteValues);
        }

        [NonAction]
        public System.Web.Mvc.ActionResult Edit() {
            return new T4MVC_ActionResult(Name, Actions.Edit);
        }

        [NonAction]
        public System.Web.Mvc.ActionResult Update() {
            return new T4MVC_ActionResult(Name, Actions.Update);
        }


        [CompilerGenerated]
        public readonly string Name = "ContentSection";

        static readonly ActionNames s_actions = new ActionNames();
        [CompilerGenerated]
        public ActionNames Actions { get { return s_actions; } }
        [CompilerGenerated]
        public class ActionNames {
            public readonly string Edit = "Edit";
            public readonly string Update = "Update";
        }


        [CompilerGenerated]
        public ViewNames Views { get { return new ViewNames(); } }
        [CompilerGenerated]
        public class ViewNames {
            private bool _withPath = false;
            public ViewNames WithPath { get { _withPath = true; return this ;} }
            public string PathName { get { return ""; } }
            public string Edit { get { return (_withPath ? PathName + "/" : "") + "Edit"; } }
        }
    }
}

namespace T4MVC {
    [CompilerGenerated]
    public class T4MVC_ContentSectionController: ClubStarterKit.Web.Controllers.ContentSectionController {
        public T4MVC_ContentSectionController() : base(Dummy.Instance) { }

        public override System.Web.Mvc.ActionResult Edit(string id) {
            var callInfo = new T4MVC_ActionResult("ContentSection", Actions.Edit);
            callInfo.RouteValues.Add("id", id);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult Update(ClubStarterKit.Domain.ContentSection section) {
            var callInfo = new T4MVC_ActionResult("ContentSection", Actions.Update);
            callInfo.RouteValues.Add("section", section);
            return callInfo;
        }

    }
}

namespace ClubStarterKit.Web.Controllers {
    public partial class DownloadsController {

        public DownloadsController() { }

        [CompilerGenerated]
        protected DownloadsController(Dummy d) { }

        protected RedirectToRouteResult RedirectToAction(ActionResult result) {
            var callInfo = (IT4MVCActionResult)result;
            return RedirectToRoute(callInfo.RouteValues);
        }

        [NonAction]
        public System.Web.Mvc.ActionResult Download() {
            return new T4MVC_ActionResult(Name, Actions.Download);
        }

        [NonAction]
        public System.Web.Mvc.ActionResult Delete() {
            return new T4MVC_ActionResult(Name, Actions.Delete);
        }


        [CompilerGenerated]
        public readonly string Name = "Downloads";

        static readonly ActionNames s_actions = new ActionNames();
        [CompilerGenerated]
        public ActionNames Actions { get { return s_actions; } }
        [CompilerGenerated]
        public class ActionNames {
            public readonly string Index = "Index";
            public readonly string Download = "Download";
            public readonly string New = "New";
            public readonly string Upload = "Upload";
            public readonly string Delete = "Delete";
        }


        [CompilerGenerated]
        public ViewNames Views { get { return new ViewNames(); } }
        [CompilerGenerated]
        public class ViewNames {
            private bool _withPath = false;
            public ViewNames WithPath { get { _withPath = true; return this ;} }
            public string PathName { get { return ""; } }
            public string Edit { get { return (_withPath ? PathName + "/" : "") + "Edit"; } }
            public string List { get { return (_withPath ? PathName + "/" : "") + "List"; } }
        }
    }
}

namespace T4MVC {
    [CompilerGenerated]
    public class T4MVC_DownloadsController: ClubStarterKit.Web.Controllers.DownloadsController {
        public T4MVC_DownloadsController() : base(Dummy.Instance) { }

        public override System.Web.Mvc.ActionResult Index() {
            var callInfo = new T4MVC_ActionResult("Downloads", Actions.Index);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult Download(int id) {
            var callInfo = new T4MVC_ActionResult("Downloads", Actions.Download);
            callInfo.RouteValues.Add("id", id);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult New() {
            var callInfo = new T4MVC_ActionResult("Downloads", Actions.New);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult Upload() {
            var callInfo = new T4MVC_ActionResult("Downloads", Actions.Upload);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult Delete(int id) {
            var callInfo = new T4MVC_ActionResult("Downloads", Actions.Delete);
            callInfo.RouteValues.Add("id", id);
            return callInfo;
        }

    }
}

namespace ClubStarterKit.Web.Controllers {
    public partial class EventsController {

        public EventsController() { }

        [CompilerGenerated]
        protected EventsController(Dummy d) { }

        protected RedirectToRouteResult RedirectToAction(ActionResult result) {
            var callInfo = (IT4MVCActionResult)result;
            return RedirectToRoute(callInfo.RouteValues);
        }

        [NonAction]
        public System.Web.Mvc.ActionResult Calendar() {
            return new T4MVC_ActionResult(Name, Actions.Calendar);
        }

        [NonAction]
        public System.Web.Mvc.ActionResult ViewEvent() {
            return new T4MVC_ActionResult(Name, Actions.ViewEvent);
        }

        [NonAction]
        public System.Web.Mvc.ActionResult Delete() {
            return new T4MVC_ActionResult(Name, Actions.Delete);
        }

        [NonAction]
        public System.Web.Mvc.ActionResult Update() {
            return new T4MVC_ActionResult(Name, Actions.Update);
        }

        [NonAction]
        public System.Web.Mvc.ActionResult Edit() {
            return new T4MVC_ActionResult(Name, Actions.Edit);
        }

        [NonAction]
        public System.Web.Mvc.ActionResult UpdateLocation() {
            return new T4MVC_ActionResult(Name, Actions.UpdateLocation);
        }


        [CompilerGenerated]
        public readonly string Name = "Events";

        static readonly ActionNames s_actions = new ActionNames();
        [CompilerGenerated]
        public ActionNames Actions { get { return s_actions; } }
        [CompilerGenerated]
        public class ActionNames {
            public readonly string Index = "Index";
            public readonly string Rss = "Rss";
            public readonly string Calendar = "Calendar";
            public readonly string ViewEvent = "View";
            public readonly string Delete = "Delete";
            public readonly string Update = "Update";
            public readonly string Edit = "Edit";
            public readonly string New = "New";
            public readonly string NewLocation = "NewLocation";
            public readonly string UpdateLocation = "UpdateLocation";
        }


        [CompilerGenerated]
        public ViewNames Views { get { return new ViewNames(); } }
        [CompilerGenerated]
        public class ViewNames {
            private bool _withPath = false;
            public ViewNames WithPath { get { _withPath = true; return this ;} }
            public string PathName { get { return ""; } }
            public string CalendarMonth { get { return (_withPath ? PathName + "/" : "") + "CalendarMonth"; } }
            public string CalendarWeek { get { return (_withPath ? PathName + "/" : "") + "CalendarWeek"; } }
            public string Edit { get { return (_withPath ? PathName + "/" : "") + "Edit"; } }
            public string EditLocation { get { return (_withPath ? PathName + "/" : "") + "EditLocation"; } }
            public string Month { get { return (_withPath ? PathName + "/" : "") + "Month"; } }
            public string View { get { return (_withPath ? PathName + "/" : "") + "View"; } }
            public string Week { get { return (_withPath ? PathName + "/" : "") + "Week"; } }
            static readonly _EditorTemplates s_EditorTemplates = new _EditorTemplates();
            public _EditorTemplates EditorTemplates { get { return s_EditorTemplates; } }
            public partial class _EditorTemplates{
                private bool _withPath = false;
                public _EditorTemplates WithPath { get { _withPath = true; return this ;} }
                public string PathName { get { return "EditorTemplates"; } }
                public string Location { get { return (_withPath ? PathName + "/" : "") + "Location"; } }
            }
        }
    }
}

namespace T4MVC {
    [CompilerGenerated]
    public class T4MVC_EventsController: ClubStarterKit.Web.Controllers.EventsController {
        public T4MVC_EventsController() : base(Dummy.Instance) { }

        public override System.Web.Mvc.ActionResult Index() {
            var callInfo = new T4MVC_ActionResult("Events", Actions.Index);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult Rss() {
            var callInfo = new T4MVC_ActionResult("Events", Actions.Rss);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult Calendar(string id) {
            var callInfo = new T4MVC_ActionResult("Events", Actions.Calendar);
            callInfo.RouteValues.Add("id", id);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult ViewEvent(string id) {
            var callInfo = new T4MVC_ActionResult("Events", Actions.ViewEvent);
            callInfo.RouteValues.Add("id", id);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult Delete(string id) {
            var callInfo = new T4MVC_ActionResult("Events", Actions.Delete);
            callInfo.RouteValues.Add("id", id);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult Update(ClubStarterKit.Domain.Event evnt) {
            var callInfo = new T4MVC_ActionResult("Events", Actions.Update);
            callInfo.RouteValues.Add("evnt", evnt);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult Edit(string id) {
            var callInfo = new T4MVC_ActionResult("Events", Actions.Edit);
            callInfo.RouteValues.Add("id", id);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult New() {
            var callInfo = new T4MVC_ActionResult("Events", Actions.New);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult NewLocation() {
            var callInfo = new T4MVC_ActionResult("Events", Actions.NewLocation);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult UpdateLocation(ClubStarterKit.Domain.Location location) {
            var callInfo = new T4MVC_ActionResult("Events", Actions.UpdateLocation);
            callInfo.RouteValues.Add("location", location);
            return callInfo;
        }

    }
}

namespace ClubStarterKit.Web.Controllers {
    public partial class ForumController {

        public ForumController() { }

        [CompilerGenerated]
        protected ForumController(Dummy d) { }

        protected RedirectToRouteResult RedirectToAction(ActionResult result) {
            var callInfo = (IT4MVCActionResult)result;
            return RedirectToRoute(callInfo.RouteValues);
        }

        [NonAction]
        public System.Web.Mvc.ActionResult ViewTopic() {
            return new T4MVC_ActionResult(Name, Actions.ViewTopic);
        }

        [NonAction]
        public System.Web.Mvc.ActionResult Rss() {
            return new T4MVC_ActionResult(Name, Actions.Rss);
        }

        [NonAction]
        public System.Web.Mvc.ActionResult Edit() {
            return new T4MVC_ActionResult(Name, Actions.Edit);
        }

        [NonAction]
        public System.Web.Mvc.ActionResult Update() {
            return new T4MVC_ActionResult(Name, Actions.Update);
        }

        [NonAction]
        public System.Web.Mvc.ActionResult Delete() {
            return new T4MVC_ActionResult(Name, Actions.Delete);
        }


        [CompilerGenerated]
        public readonly string Name = "Forum";

        static readonly ActionNames s_actions = new ActionNames();
        [CompilerGenerated]
        public ActionNames Actions { get { return s_actions; } }
        [CompilerGenerated]
        public class ActionNames {
            public readonly string Index = "Index";
            public readonly string ViewTopic = "View";
            public readonly string Rss = "Rss";
            public readonly string Edit = "Edit";
            public readonly string New = "New";
            public readonly string Update = "Update";
            public readonly string Delete = "Delete";
        }


        [CompilerGenerated]
        public ViewNames Views { get { return new ViewNames(); } }
        [CompilerGenerated]
        public class ViewNames {
            private bool _withPath = false;
            public ViewNames WithPath { get { _withPath = true; return this ;} }
            public string PathName { get { return ""; } }
            public string EditTopic { get { return (_withPath ? PathName + "/" : "") + "EditTopic"; } }
            public string Threads { get { return (_withPath ? PathName + "/" : "") + "Threads"; } }
            public string TopicList { get { return (_withPath ? PathName + "/" : "") + "TopicList"; } }
            static readonly _DisplayTemplates s_DisplayTemplates = new _DisplayTemplates();
            public _DisplayTemplates DisplayTemplates { get { return s_DisplayTemplates; } }
            public partial class _DisplayTemplates{
                private bool _withPath = false;
                public _DisplayTemplates WithPath { get { _withPath = true; return this ;} }
                public string PathName { get { return "DisplayTemplates"; } }
                public string ThreadList { get { return (_withPath ? PathName + "/" : "") + "ThreadList"; } }
            }
        }
    }
}

namespace T4MVC {
    [CompilerGenerated]
    public class T4MVC_ForumController: ClubStarterKit.Web.Controllers.ForumController {
        public T4MVC_ForumController() : base(Dummy.Instance) { }

        public override System.Web.Mvc.ActionResult Index() {
            var callInfo = new T4MVC_ActionResult("Forum", Actions.Index);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult ViewTopic(string id, int? page) {
            var callInfo = new T4MVC_ActionResult("Forum", Actions.ViewTopic);
            callInfo.RouteValues.Add("id", id);
            callInfo.RouteValues.Add("page", page);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult Rss(string id) {
            var callInfo = new T4MVC_ActionResult("Forum", Actions.Rss);
            callInfo.RouteValues.Add("id", id);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult Edit(string id) {
            var callInfo = new T4MVC_ActionResult("Forum", Actions.Edit);
            callInfo.RouteValues.Add("id", id);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult New() {
            var callInfo = new T4MVC_ActionResult("Forum", Actions.New);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult Update(ClubStarterKit.Web.ViewData.Forum.EditTopicViewData model) {
            var callInfo = new T4MVC_ActionResult("Forum", Actions.Update);
            callInfo.RouteValues.Add("model", model);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult Delete(string id) {
            var callInfo = new T4MVC_ActionResult("Forum", Actions.Delete);
            callInfo.RouteValues.Add("id", id);
            return callInfo;
        }

    }
}

namespace ClubStarterKit.Web.Controllers {
    public partial class HomeController {

        public HomeController() { }

        [CompilerGenerated]
        protected HomeController(Dummy d) { }

        protected RedirectToRouteResult RedirectToAction(ActionResult result) {
            var callInfo = (IT4MVCActionResult)result;
            return RedirectToRoute(callInfo.RouteValues);
        }


        [CompilerGenerated]
        public readonly string Name = "Home";

        static readonly ActionNames s_actions = new ActionNames();
        [CompilerGenerated]
        public ActionNames Actions { get { return s_actions; } }
        [CompilerGenerated]
        public class ActionNames {
            public readonly string Index = "Index";
            public readonly string Error = "Error";
        }


        [CompilerGenerated]
        public ViewNames Views { get { return new ViewNames(); } }
        [CompilerGenerated]
        public class ViewNames {
            private bool _withPath = false;
            public ViewNames WithPath { get { _withPath = true; return this ;} }
            public string PathName { get { return ""; } }
            public string Index { get { return (_withPath ? PathName + "/" : "") + "Index"; } }
            static readonly _DisplayTemplates s_DisplayTemplates = new _DisplayTemplates();
            public _DisplayTemplates DisplayTemplates { get { return s_DisplayTemplates; } }
            public partial class _DisplayTemplates{
                private bool _withPath = false;
                public _DisplayTemplates WithPath { get { _withPath = true; return this ;} }
                public string PathName { get { return "DisplayTemplates"; } }
                public string HomeAnnouncement { get { return (_withPath ? PathName + "/" : "") + "HomeAnnouncement"; } }
                public string HomeBlogPosts { get { return (_withPath ? PathName + "/" : "") + "HomeBlogPosts"; } }
                public string HomeEvents { get { return (_withPath ? PathName + "/" : "") + "HomeEvents"; } }
            }
        }
    }
}

namespace T4MVC {
    [CompilerGenerated]
    public class T4MVC_HomeController: ClubStarterKit.Web.Controllers.HomeController {
        public T4MVC_HomeController() : base(Dummy.Instance) { }

        public override System.Web.Mvc.ActionResult Index() {
            var callInfo = new T4MVC_ActionResult("Home", Actions.Index);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult Error() {
            var callInfo = new T4MVC_ActionResult("Home", Actions.Error);
            return callInfo;
        }

    }
}

namespace ClubStarterKit.Web.Controllers {
    public partial class MembershipController {

        public MembershipController() { }

        [CompilerGenerated]
        protected MembershipController(Dummy d) { }

        protected RedirectToRouteResult RedirectToAction(ActionResult result) {
            var callInfo = (IT4MVCActionResult)result;
            return RedirectToRoute(callInfo.RouteValues);
        }

        [NonAction]
        public System.Web.Mvc.ActionResult Authenticate() {
            return new T4MVC_ActionResult(Name, Actions.Authenticate);
        }

        [NonAction]
        public System.Web.Mvc.ActionResult Forgot() {
            return new T4MVC_ActionResult(Name, Actions.Forgot);
        }

        [NonAction]
        public System.Web.Mvc.ActionResult Registration() {
            return new T4MVC_ActionResult(Name, Actions.Registration);
        }

        [NonAction]
        public System.Web.Mvc.ActionResult Delete() {
            return new T4MVC_ActionResult(Name, Actions.Delete);
        }

        [NonAction]
        public System.Web.Mvc.ActionResult SendEmail() {
            return new T4MVC_ActionResult(Name, Actions.SendEmail);
        }

        [NonAction]
        public System.Web.Mvc.ActionResult Update() {
            return new T4MVC_ActionResult(Name, Actions.Update);
        }

        [NonAction]
        public System.Web.Mvc.ActionResult List() {
            return new T4MVC_ActionResult(Name, Actions.List);
        }

        [NonAction]
        public System.Web.Mvc.ActionResult Profile() {
            return new T4MVC_ActionResult(Name, Actions.Profile);
        }

        [NonAction]
        public System.Web.Mvc.ActionResult ChangePassword() {
            return new T4MVC_ActionResult(Name, Actions.ChangePassword);
        }


        [CompilerGenerated]
        public readonly string Name = "Membership";

        static readonly ActionNames s_actions = new ActionNames();
        [CompilerGenerated]
        public ActionNames Actions { get { return s_actions; } }
        [CompilerGenerated]
        public class ActionNames {
            public readonly string Login = "Login";
            public readonly string Authenticate = "Authenticate";
            public readonly string Logout = "Logout";
            public readonly string Forgot = "Forgot";
            public readonly string Registration = "Registration";
            public readonly string Delete = "Delete";
            public readonly string Email = "Email";
            public readonly string SendEmail = "SendEmail";
            public readonly string Revoke = "Revoke";
            public readonly string Update = "Update";
            public readonly string List = "List";
            public readonly string Profile = "Profile";
            public readonly string Edit = "Edit";
            public readonly string Index = "Index";
            public readonly string ChangePassword = "ChangePassword";
        }


        [CompilerGenerated]
        public ViewNames Views { get { return new ViewNames(); } }
        [CompilerGenerated]
        public class ViewNames {
            private bool _withPath = false;
            public ViewNames WithPath { get { _withPath = true; return this ;} }
            public string PathName { get { return ""; } }
            public string Edit { get { return (_withPath ? PathName + "/" : "") + "Edit"; } }
            public string Email { get { return (_withPath ? PathName + "/" : "") + "Email"; } }
            public string List { get { return (_withPath ? PathName + "/" : "") + "List"; } }
            public string Login { get { return (_withPath ? PathName + "/" : "") + "Login"; } }
            public string Profile { get { return (_withPath ? PathName + "/" : "") + "Profile"; } }
        }
    }
}

namespace T4MVC {
    [CompilerGenerated]
    public class T4MVC_MembershipController: ClubStarterKit.Web.Controllers.MembershipController {
        public T4MVC_MembershipController() : base(Dummy.Instance) { }

        public override System.Web.Mvc.ActionResult Login() {
            var callInfo = new T4MVC_ActionResult("Membership", Actions.Login);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult Authenticate(ClubStarterKit.Web.ViewData.Membership.LoginViewData authData) {
            var callInfo = new T4MVC_ActionResult("Membership", Actions.Authenticate);
            callInfo.RouteValues.Add("authData", authData);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult Logout() {
            var callInfo = new T4MVC_ActionResult("Membership", Actions.Logout);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult Forgot(string email) {
            var callInfo = new T4MVC_ActionResult("Membership", Actions.Forgot);
            callInfo.RouteValues.Add("email", email);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult Registration(ClubStarterKit.Web.ViewData.Membership.RegistrationViewData registration) {
            var callInfo = new T4MVC_ActionResult("Membership", Actions.Registration);
            callInfo.RouteValues.Add("registration", registration);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult Delete(string id, string returnurl) {
            var callInfo = new T4MVC_ActionResult("Membership", Actions.Delete);
            callInfo.RouteValues.Add("id", id);
            callInfo.RouteValues.Add("returnurl", returnurl);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult Email() {
            var callInfo = new T4MVC_ActionResult("Membership", Actions.Email);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult SendEmail(ClubStarterKit.Web.ViewData.Membership.SendEmailViewData data) {
            var callInfo = new T4MVC_ActionResult("Membership", Actions.SendEmail);
            callInfo.RouteValues.Add("data", data);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult Revoke() {
            var callInfo = new T4MVC_ActionResult("Membership", Actions.Revoke);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult Update(ClubStarterKit.Domain.User user) {
            var callInfo = new T4MVC_ActionResult("Membership", Actions.Update);
            callInfo.RouteValues.Add("user", user);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult List(int id) {
            var callInfo = new T4MVC_ActionResult("Membership", Actions.List);
            callInfo.RouteValues.Add("id", id);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult Profile(string id) {
            var callInfo = new T4MVC_ActionResult("Membership", Actions.Profile);
            callInfo.RouteValues.Add("id", id);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult Edit() {
            var callInfo = new T4MVC_ActionResult("Membership", Actions.Edit);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult Index() {
            var callInfo = new T4MVC_ActionResult("Membership", Actions.Index);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult ChangePassword(string CurrentPassword, string NewPassword, string NewPasswordRepeat) {
            var callInfo = new T4MVC_ActionResult("Membership", Actions.ChangePassword);
            callInfo.RouteValues.Add("CurrentPassword", CurrentPassword);
            callInfo.RouteValues.Add("NewPassword", NewPassword);
            callInfo.RouteValues.Add("NewPasswordRepeat", NewPasswordRepeat);
            return callInfo;
        }

    }
}

namespace ClubStarterKit.Web.Controllers {
    public partial class MessageController {

        public MessageController() { }

        [CompilerGenerated]
        protected MessageController(Dummy d) { }

        protected RedirectToRouteResult RedirectToAction(ActionResult result) {
            var callInfo = (IT4MVCActionResult)result;
            return RedirectToRoute(callInfo.RouteValues);
        }

        [NonAction]
        public System.Web.Mvc.ActionResult MarkSpam() {
            return new T4MVC_ActionResult(Name, Actions.MarkSpam);
        }

        [NonAction]
        public System.Web.Mvc.ActionResult Delete() {
            return new T4MVC_ActionResult(Name, Actions.Delete);
        }

        [NonAction]
        public System.Web.Mvc.ActionResult Update() {
            return new T4MVC_ActionResult(Name, Actions.Update);
        }


        [CompilerGenerated]
        public readonly string Name = "Message";

        static readonly ActionNames s_actions = new ActionNames();
        [CompilerGenerated]
        public ActionNames Actions { get { return s_actions; } }
        [CompilerGenerated]
        public class ActionNames {
            public readonly string MarkSpam = "MarkSpam";
            public readonly string Delete = "Delete";
            public readonly string Update = "Update";
        }


        [CompilerGenerated]
        public ViewNames Views { get { return new ViewNames(); } }
        [CompilerGenerated]
        public class ViewNames {
            private bool _withPath = false;
            public ViewNames WithPath { get { _withPath = true; return this ;} }
            public string PathName { get { return ""; } }
        }
    }
}

namespace T4MVC {
    [CompilerGenerated]
    public class T4MVC_MessageController: ClubStarterKit.Web.Controllers.MessageController {
        public T4MVC_MessageController() : base(Dummy.Instance) { }

        public override System.Web.Mvc.ActionResult MarkSpam(int id) {
            var callInfo = new T4MVC_ActionResult("Message", Actions.MarkSpam);
            callInfo.RouteValues.Add("id", id);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult Delete(int id) {
            var callInfo = new T4MVC_ActionResult("Message", Actions.Delete);
            callInfo.RouteValues.Add("id", id);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult Update(string message, string thread, int messageId) {
            var callInfo = new T4MVC_ActionResult("Message", Actions.Update);
            callInfo.RouteValues.Add("message", message);
            callInfo.RouteValues.Add("thread", thread);
            callInfo.RouteValues.Add("messageId", messageId);
            return callInfo;
        }

    }
}

namespace ClubStarterKit.Web.Controllers {
    public partial class NewsController {

        public NewsController() { }

        [CompilerGenerated]
        protected NewsController(Dummy d) { }

        protected RedirectToRouteResult RedirectToAction(ActionResult result) {
            var callInfo = (IT4MVCActionResult)result;
            return RedirectToRoute(callInfo.RouteValues);
        }

        [NonAction]
        public System.Web.Mvc.ActionResult List() {
            return new T4MVC_ActionResult(Name, Actions.List);
        }

        [NonAction]
        public System.Web.Mvc.ActionResult Show() {
            return new T4MVC_ActionResult(Name, Actions.Show);
        }

        [NonAction]
        public System.Web.Mvc.ActionResult Edit() {
            return new T4MVC_ActionResult(Name, Actions.Edit);
        }

        [NonAction]
        public System.Web.Mvc.ActionResult Update() {
            return new T4MVC_ActionResult(Name, Actions.Update);
        }

        [NonAction]
        public System.Web.Mvc.ActionResult Delete() {
            return new T4MVC_ActionResult(Name, Actions.Delete);
        }


        [CompilerGenerated]
        public readonly string Name = "News";

        static readonly ActionNames s_actions = new ActionNames();
        [CompilerGenerated]
        public ActionNames Actions { get { return s_actions; } }
        [CompilerGenerated]
        public class ActionNames {
            public readonly string Index = "Index";
            public readonly string List = "List";
            public readonly string Rss = "Rss";
            public readonly string Show = "View";
            public readonly string Edit = "Edit";
            public readonly string New = "New";
            public readonly string Update = "Update";
            public readonly string Delete = "Delete";
        }


        [CompilerGenerated]
        public ViewNames Views { get { return new ViewNames(); } }
        [CompilerGenerated]
        public class ViewNames {
            private bool _withPath = false;
            public ViewNames WithPath { get { _withPath = true; return this ;} }
            public string PathName { get { return ""; } }
            public string Edit { get { return (_withPath ? PathName + "/" : "") + "Edit"; } }
            public string List { get { return (_withPath ? PathName + "/" : "") + "List"; } }
            public string View { get { return (_withPath ? PathName + "/" : "") + "View"; } }
            static readonly _DisplayTemplates s_DisplayTemplates = new _DisplayTemplates();
            public _DisplayTemplates DisplayTemplates { get { return s_DisplayTemplates; } }
            public partial class _DisplayTemplates{
                private bool _withPath = false;
                public _DisplayTemplates WithPath { get { _withPath = true; return this ;} }
                public string PathName { get { return "DisplayTemplates"; } }
                public string Announcement { get { return (_withPath ? PathName + "/" : "") + "Announcement"; } }
                public string PagedNews { get { return (_withPath ? PathName + "/" : "") + "PagedNews"; } }
            }
            static readonly _EditorTemplates s_EditorTemplates = new _EditorTemplates();
            public _EditorTemplates EditorTemplates { get { return s_EditorTemplates; } }
            public partial class _EditorTemplates{
                private bool _withPath = false;
                public _EditorTemplates WithPath { get { _withPath = true; return this ;} }
                public string PathName { get { return "EditorTemplates"; } }
                public string Announcement { get { return (_withPath ? PathName + "/" : "") + "Announcement"; } }
            }
        }
    }
}

namespace T4MVC {
    [CompilerGenerated]
    public class T4MVC_NewsController: ClubStarterKit.Web.Controllers.NewsController {
        public T4MVC_NewsController() : base(Dummy.Instance) { }

        public override System.Web.Mvc.ActionResult Index() {
            var callInfo = new T4MVC_ActionResult("News", Actions.Index);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult List(int id) {
            var callInfo = new T4MVC_ActionResult("News", Actions.List);
            callInfo.RouteValues.Add("id", id);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult Rss() {
            var callInfo = new T4MVC_ActionResult("News", Actions.Rss);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult Show(string id) {
            var callInfo = new T4MVC_ActionResult("News", Actions.Show);
            callInfo.RouteValues.Add("id", id);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult Edit(string id) {
            var callInfo = new T4MVC_ActionResult("News", Actions.Edit);
            callInfo.RouteValues.Add("id", id);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult New() {
            var callInfo = new T4MVC_ActionResult("News", Actions.New);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult Update(ClubStarterKit.Domain.Announcement post) {
            var callInfo = new T4MVC_ActionResult("News", Actions.Update);
            callInfo.RouteValues.Add("post", post);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult Delete(string id, string returnurl) {
            var callInfo = new T4MVC_ActionResult("News", Actions.Delete);
            callInfo.RouteValues.Add("id", id);
            callInfo.RouteValues.Add("returnurl", returnurl);
            return callInfo;
        }

    }
}

namespace ClubStarterKit.Web.Controllers {
    public partial class PhotosController {

        public PhotosController() { }

        [CompilerGenerated]
        protected PhotosController(Dummy d) { }

        protected RedirectToRouteResult RedirectToAction(ActionResult result) {
            var callInfo = (IT4MVCActionResult)result;
            return RedirectToRoute(callInfo.RouteValues);
        }

        [NonAction]
        public System.Web.Mvc.ActionResult ViewAlbum() {
            return new T4MVC_ActionResult(Name, Actions.ViewAlbum);
        }

        [NonAction]
        public System.Web.Mvc.ActionResult Photo() {
            return new T4MVC_ActionResult(Name, Actions.Photo);
        }

        [NonAction]
        public System.Web.Mvc.ActionResult Edit() {
            return new T4MVC_ActionResult(Name, Actions.Edit);
        }

        [NonAction]
        public System.Web.Mvc.ActionResult Update() {
            return new T4MVC_ActionResult(Name, Actions.Update);
        }

        [NonAction]
        public System.Web.Mvc.ActionResult Delete() {
            return new T4MVC_ActionResult(Name, Actions.Delete);
        }

        [NonAction]
        public System.Web.Mvc.ActionResult Upload() {
            return new T4MVC_ActionResult(Name, Actions.Upload);
        }

        [NonAction]
        public System.Web.Mvc.ActionResult Comments() {
            return new T4MVC_ActionResult(Name, Actions.Comments);
        }

        [NonAction]
        public System.Web.Mvc.ActionResult DeleteComment() {
            return new T4MVC_ActionResult(Name, Actions.DeleteComment);
        }

        [NonAction]
        public System.Web.Mvc.ActionResult AddComment() {
            return new T4MVC_ActionResult(Name, Actions.AddComment);
        }


        [CompilerGenerated]
        public readonly string Name = "Photos";

        static readonly ActionNames s_actions = new ActionNames();
        [CompilerGenerated]
        public ActionNames Actions { get { return s_actions; } }
        [CompilerGenerated]
        public class ActionNames {
            public readonly string Index = "Index";
            public readonly string ViewAlbum = "View";
            public readonly string Photo = "Photo";
            public readonly string Edit = "Edit";
            public readonly string New = "New";
            public readonly string Update = "Update";
            public readonly string Delete = "Delete";
            public readonly string Upload = "Upload";
            public readonly string Comments = "Comments";
            public readonly string DeleteComment = "DeleteComment";
            public readonly string AddComment = "AddComment";
        }


        [CompilerGenerated]
        public ViewNames Views { get { return new ViewNames(); } }
        [CompilerGenerated]
        public class ViewNames {
            private bool _withPath = false;
            public ViewNames WithPath { get { _withPath = true; return this ;} }
            public string PathName { get { return ""; } }
            public string Albums { get { return (_withPath ? PathName + "/" : "") + "Albums"; } }
            public string Comments { get { return (_withPath ? PathName + "/" : "") + "Comments"; } }
            public string Edit { get { return (_withPath ? PathName + "/" : "") + "Edit"; } }
            public string View { get { return (_withPath ? PathName + "/" : "") + "View"; } }
            static readonly _DisplayTemplates s_DisplayTemplates = new _DisplayTemplates();
            public _DisplayTemplates DisplayTemplates { get { return s_DisplayTemplates; } }
            public partial class _DisplayTemplates{
                private bool _withPath = false;
                public _DisplayTemplates WithPath { get { _withPath = true; return this ;} }
                public string PathName { get { return "DisplayTemplates"; } }
                public string Photo { get { return (_withPath ? PathName + "/" : "") + "Photo"; } }
            }
        }
    }
}

namespace T4MVC {
    [CompilerGenerated]
    public class T4MVC_PhotosController: ClubStarterKit.Web.Controllers.PhotosController {
        public T4MVC_PhotosController() : base(Dummy.Instance) { }

        public override System.Web.Mvc.ActionResult Index() {
            var callInfo = new T4MVC_ActionResult("Photos", Actions.Index);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult ViewAlbum(string id, int photo) {
            var callInfo = new T4MVC_ActionResult("Photos", Actions.ViewAlbum);
            callInfo.RouteValues.Add("id", id);
            callInfo.RouteValues.Add("photo", photo);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult Photo(string id, string app) {
            var callInfo = new T4MVC_ActionResult("Photos", Actions.Photo);
            callInfo.RouteValues.Add("id", id);
            callInfo.RouteValues.Add("app", app);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult Edit(string id) {
            var callInfo = new T4MVC_ActionResult("Photos", Actions.Edit);
            callInfo.RouteValues.Add("id", id);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult New() {
            var callInfo = new T4MVC_ActionResult("Photos", Actions.New);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult Update(ClubStarterKit.Domain.Album album) {
            var callInfo = new T4MVC_ActionResult("Photos", Actions.Update);
            callInfo.RouteValues.Add("album", album);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult Delete(int id, int photo) {
            var callInfo = new T4MVC_ActionResult("Photos", Actions.Delete);
            callInfo.RouteValues.Add("id", id);
            callInfo.RouteValues.Add("photo", photo);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult Upload(string album, string title) {
            var callInfo = new T4MVC_ActionResult("Photos", Actions.Upload);
            callInfo.RouteValues.Add("album", album);
            callInfo.RouteValues.Add("title", title);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult Comments(int id) {
            var callInfo = new T4MVC_ActionResult("Photos", Actions.Comments);
            callInfo.RouteValues.Add("id", id);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult DeleteComment(ClubStarterKit.Domain.PhotoComment comment) {
            var callInfo = new T4MVC_ActionResult("Photos", Actions.DeleteComment);
            callInfo.RouteValues.Add("comment", comment);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult AddComment(int photo, string comment) {
            var callInfo = new T4MVC_ActionResult("Photos", Actions.AddComment);
            callInfo.RouteValues.Add("photo", photo);
            callInfo.RouteValues.Add("comment", comment);
            return callInfo;
        }

    }
}

namespace ClubStarterKit.Web.Controllers {
    public partial class PollController {

        public PollController() { }

        [CompilerGenerated]
        protected PollController(Dummy d) { }

        protected RedirectToRouteResult RedirectToAction(ActionResult result) {
            var callInfo = (IT4MVCActionResult)result;
            return RedirectToRoute(callInfo.RouteValues);
        }

        [NonAction]
        public System.Web.Mvc.ActionResult Show() {
            return new T4MVC_ActionResult(Name, Actions.Show);
        }

        [NonAction]
        public System.Web.Mvc.ActionResult Vote() {
            return new T4MVC_ActionResult(Name, Actions.Vote);
        }

        [NonAction]
        public System.Web.Mvc.ActionResult UpdateQuestion() {
            return new T4MVC_ActionResult(Name, Actions.UpdateQuestion);
        }

        [NonAction]
        public System.Web.Mvc.ActionResult AddAnswer() {
            return new T4MVC_ActionResult(Name, Actions.AddAnswer);
        }


        [CompilerGenerated]
        public readonly string Name = "Poll";

        static readonly ActionNames s_actions = new ActionNames();
        [CompilerGenerated]
        public ActionNames Actions { get { return s_actions; } }
        [CompilerGenerated]
        public class ActionNames {
            public readonly string Show = "View";
            public readonly string Vote = "Vote";
            public readonly string Add = "Add";
            public readonly string UpdateQuestion = "UpdateQuestion";
            public readonly string AddAnswer = "AddAnswer";
            public readonly string New = "New";
        }


        [CompilerGenerated]
        public ViewNames Views { get { return new ViewNames(); } }
        [CompilerGenerated]
        public class ViewNames {
            private bool _withPath = false;
            public ViewNames WithPath { get { _withPath = true; return this ;} }
            public string PathName { get { return ""; } }
            public string AddAnswers { get { return (_withPath ? PathName + "/" : "") + "AddAnswers"; } }
            public string Edit { get { return (_withPath ? PathName + "/" : "") + "Edit"; } }
            public string NoPoll { get { return (_withPath ? PathName + "/" : "") + "NoPoll"; } }
            public string ViewResults { get { return (_withPath ? PathName + "/" : "") + "ViewResults"; } }
            public string Vote { get { return (_withPath ? PathName + "/" : "") + "Vote"; } }
        }
    }
}

namespace T4MVC {
    [CompilerGenerated]
    public class T4MVC_PollController: ClubStarterKit.Web.Controllers.PollController {
        public T4MVC_PollController() : base(Dummy.Instance) { }

        public override System.Web.Mvc.ActionResult Show(int id) {
            var callInfo = new T4MVC_ActionResult("Poll", Actions.Show);
            callInfo.RouteValues.Add("id", id);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult Vote(int poll, int answer) {
            var callInfo = new T4MVC_ActionResult("Poll", Actions.Vote);
            callInfo.RouteValues.Add("poll", poll);
            callInfo.RouteValues.Add("answer", answer);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult Add() {
            var callInfo = new T4MVC_ActionResult("Poll", Actions.Add);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult UpdateQuestion(ClubStarterKit.Domain.PollQuestion question) {
            var callInfo = new T4MVC_ActionResult("Poll", Actions.UpdateQuestion);
            callInfo.RouteValues.Add("question", question);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult AddAnswer(string answer, int poll, int pos) {
            var callInfo = new T4MVC_ActionResult("Poll", Actions.AddAnswer);
            callInfo.RouteValues.Add("answer", answer);
            callInfo.RouteValues.Add("poll", poll);
            callInfo.RouteValues.Add("pos", pos);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult New() {
            var callInfo = new T4MVC_ActionResult("Poll", Actions.New);
            return callInfo;
        }

    }
}

namespace ClubStarterKit.Web.Controllers {
    public partial class ThreadController {

        public ThreadController() { }

        [CompilerGenerated]
        protected ThreadController(Dummy d) { }

        protected RedirectToRouteResult RedirectToAction(ActionResult result) {
            var callInfo = (IT4MVCActionResult)result;
            return RedirectToRoute(callInfo.RouteValues);
        }

        [NonAction]
        public System.Web.Mvc.ActionResult ViewThread() {
            return new T4MVC_ActionResult(Name, Actions.ViewThread);
        }

        [NonAction]
        public System.Web.Mvc.ActionResult New() {
            return new T4MVC_ActionResult(Name, Actions.New);
        }

        [NonAction]
        public System.Web.Mvc.ActionResult Add() {
            return new T4MVC_ActionResult(Name, Actions.Add);
        }

        [NonAction]
        public System.Web.Mvc.ActionResult Rss() {
            return new T4MVC_ActionResult(Name, Actions.Rss);
        }

        [NonAction]
        public System.Web.Mvc.ActionResult Delete() {
            return new T4MVC_ActionResult(Name, Actions.Delete);
        }

        [NonAction]
        public System.Web.Mvc.ActionResult Lock() {
            return new T4MVC_ActionResult(Name, Actions.Lock);
        }

        [NonAction]
        public System.Web.Mvc.ActionResult Unock() {
            return new T4MVC_ActionResult(Name, Actions.Unock);
        }


        [CompilerGenerated]
        public readonly string Name = "Thread";

        static readonly ActionNames s_actions = new ActionNames();
        [CompilerGenerated]
        public ActionNames Actions { get { return s_actions; } }
        [CompilerGenerated]
        public class ActionNames {
            public readonly string ViewThread = "View";
            public readonly string New = "New";
            public readonly string Add = "Add";
            public readonly string Rss = "Rss";
            public readonly string Delete = "Delete";
            public readonly string Lock = "Lock";
            public readonly string Unock = "Unock";
        }


        [CompilerGenerated]
        public ViewNames Views { get { return new ViewNames(); } }
        [CompilerGenerated]
        public class ViewNames {
            private bool _withPath = false;
            public ViewNames WithPath { get { _withPath = true; return this ;} }
            public string PathName { get { return ""; } }
            public string NewThread { get { return (_withPath ? PathName + "/" : "") + "NewThread"; } }
            public string View { get { return (_withPath ? PathName + "/" : "") + "View"; } }
        }
    }
}

namespace T4MVC {
    [CompilerGenerated]
    public class T4MVC_ThreadController: ClubStarterKit.Web.Controllers.ThreadController {
        public T4MVC_ThreadController() : base(Dummy.Instance) { }

        public override System.Web.Mvc.ActionResult ViewThread(string id) {
            var callInfo = new T4MVC_ActionResult("Thread", Actions.ViewThread);
            callInfo.RouteValues.Add("id", id);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult New(string id) {
            var callInfo = new T4MVC_ActionResult("Thread", Actions.New);
            callInfo.RouteValues.Add("id", id);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult Add(string id, string message, string title) {
            var callInfo = new T4MVC_ActionResult("Thread", Actions.Add);
            callInfo.RouteValues.Add("id", id);
            callInfo.RouteValues.Add("message", message);
            callInfo.RouteValues.Add("title", title);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult Rss(string id) {
            var callInfo = new T4MVC_ActionResult("Thread", Actions.Rss);
            callInfo.RouteValues.Add("id", id);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult Delete(string id) {
            var callInfo = new T4MVC_ActionResult("Thread", Actions.Delete);
            callInfo.RouteValues.Add("id", id);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult Lock(string id) {
            var callInfo = new T4MVC_ActionResult("Thread", Actions.Lock);
            callInfo.RouteValues.Add("id", id);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult Unock(string id) {
            var callInfo = new T4MVC_ActionResult("Thread", Actions.Unock);
            callInfo.RouteValues.Add("id", id);
            return callInfo;
        }

    }
}

namespace T4MVC {
    public class SharedController {


        [CompilerGenerated]
        public ViewNames Views { get { return new ViewNames(); } }
        [CompilerGenerated]
        public class ViewNames {
            private bool _withPath = false;
            public ViewNames WithPath { get { _withPath = true; return this ;} }
            public string PathName { get { return ""; } }
            public string Error { get { return (_withPath ? PathName + "/" : "") + "Error"; } }
            public string UserCard { get { return (_withPath ? PathName + "/" : "") + "UserCard"; } }
            static readonly _DisplayTemplates s_DisplayTemplates = new _DisplayTemplates();
            public _DisplayTemplates DisplayTemplates { get { return s_DisplayTemplates; } }
            public partial class _DisplayTemplates{
                private bool _withPath = false;
                public _DisplayTemplates WithPath { get { _withPath = true; return this ;} }
                public string PathName { get { return "DisplayTemplates"; } }
                public string ContentSection { get { return (_withPath ? PathName + "/" : "") + "ContentSection"; } }
                public string ForumMessageList { get { return (_withPath ? PathName + "/" : "") + "ForumMessageList"; } }
            }
            static readonly _EditorTemplates s_EditorTemplates = new _EditorTemplates();
            public _EditorTemplates EditorTemplates { get { return s_EditorTemplates; } }
            public partial class _EditorTemplates{
                private bool _withPath = false;
                public _EditorTemplates WithPath { get { _withPath = true; return this ;} }
                public string PathName { get { return "EditorTemplates"; } }
                public string DateTime { get { return (_withPath ? PathName + "/" : "") + "DateTime"; } }
                public string DateTimeOffset { get { return (_withPath ? PathName + "/" : "") + "DateTimeOffset"; } }
            }
        }
    }
}




namespace T4MVC {
    [CompilerGenerated]
    public class Dummy {
        private Dummy() { }
        public static Dummy Instance = new Dummy();
    }
}

#endregion T4MVC
#pragma warning restore 1591


